Index: nevow/js/Divmod/Runtime/__init__.js
===================================================================
--- nevow/js/Divmod/Runtime/__init__.js	(revision 11200)
+++ nevow/js/Divmod/Runtime/__init__.js	(working copy)
@@ -54,6 +54,57 @@
         return ns;
     },
 
+    function _xpathNodeByClass(self, className) {
+        return (".//*[contains(concat(' ', normalize-space(@class), ' '), ' " + 
+                className + "')]");
+    },
+
+    /**
+     * @return the first node under root containing className in its class attr
+     * 
+     * For classes, this is better than *nodeByAttribute because it
+     * can find nodes having the given class among multiple classes,
+     * whereas *nodeByAttribute only does an exact string comparison.
+     */
+    function firstNodeByClass(self, root, className) {
+        var xepr = self._xpathNodeByClass(className);
+        var node = document.evaluate(
+                xepr,
+                root,
+                null, 
+                XPathResult.FIRST_ORDERED_NODE_TYPE,
+                null).singleNodeValue;
+        if (!node) {
+            throw Divmod.Runtime.NodeAttributeError(root, 'class', className);
+        }
+        return node;
+    },
+
+    /**
+     * @return all nodes under root containing className in their class attr
+     * 
+     * For classes, this is better than *nodeByAttribute because it
+     * can find nodes having the given class among multiple classes,
+     * whereas *nodeByAttribute only does an exact string comparison.
+     */
+    function nodesByClass(self, root, className) {
+        var results = [];
+        var xepr = self._xpathNodeByClass(className);
+        var nodes = document.evaluate(
+                xepr,
+                root, 
+                null, 
+                XPathResult.ORDERED_NODE_ITERATOR_TYPE, 
+                null);
+        var node = nodes.iterateNext();
+        while(node){
+            results.push(node);
+            node = nodes.iterateNext();
+        }
+        return results;
+    },
+
+
     function _xpathNodeByAttribute(self, attrName, attrValue) {
         var upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
         var lower = upper.toLowerCase();
@@ -668,6 +719,57 @@
         }
     },
 
+    function firstNodeByClass(self, root, className) {
+        /* duplicate this here rather than adding an "onlyOne" arg to
+           nodesByClass so adding an extra arg accidentally doesn't change
+           it's behaviour if called directly
+        */
+        var descend = Divmod.Runtime.Platform.DOM_DESCEND;
+        var terminate = Divmod.Runtime.Platform.DOM_TERMINATE;
+
+        var result = null;
+        var normalizeWS = function (str) {
+            return (' ' + str.split(/\s+/).join(' ') + ' ');
+        };
+        var rxFind = ' ' + className + ' ';
+        self.traverse(
+            root,
+            function(node) {
+                var cls = self.getAttribute(node, 'class');
+                if (normalizeWS(cls).search(rxFind)) {
+                    result = node;
+                    return terminate;
+                }
+                return descend;
+            });
+        if (result === null) {
+            throw new Error("Failed to discover node with " + className +
+                            " value " + classValue + " beneath " + root +
+                            " (programmer error).");
+        }
+        return result;
+    },
+
+    function nodesByClass(self, root, className) {
+        var descend = Divmod.Runtime.Platform.DOM_DESCEND;
+        var results = [];
+        var normalizeWS = function (str) {
+            return (' ' + str.split(/\s+/).join(' ') + ' ');
+        };
+        var rxFind = ' ' + className + ' ';
+        self.traverse(
+            root,
+            function(node) {
+                var cls = self.getAttribute(node, 'class');
+                if (normalizeWS(cls).search(rxFind)) {
+                    results.push(node);
+                }
+                return descend;
+            });
+        return results;
+    },
+
+
     function firstNodeByAttribute(self, root, attrName, attrValue) {
         /* duplicate this here rather than adding an "onlyOne" arg to
            nodesByAttribute so adding an extra arg accidentally doesn't change
Index: nevow/js/Divmod/Runtime/Tests.js
===================================================================
--- nevow/js/Divmod/Runtime/Tests.js	(revision 11200)
+++ nevow/js/Divmod/Runtime/Tests.js	(working copy)
@@ -162,6 +162,75 @@
 
 Divmod.Runtime.Tests.FindInRootNode = Nevow.Athena.Test.TestCase.subclass('Divmod.Runtime.Tests.FindInRootNode');
 Divmod.Runtime.Tests.FindInRootNode.methods(
+    /** 
+     * Test that firstNodeByClass works and can find nodes with multiple
+     * classes
+     */
+    function test_firstNodeByClass(self) {
+        try {
+            var target = document.createElement('div');
+            target.setAttribute('class', 'foo bar');
+            var ringer = document.createElement('div');
+            ringer.setAttribute('class', 'foobar');
+            self.node.appendChild(target);
+            self.node.appendChild(ringer);
+            var found = Divmod.Runtime.theRuntime.firstNodeByClass(self.node, 
+                    'bar');
+            self.assertEqual(found.getAttribute('class'), 'foo bar');
+        } finally {
+            self.node.removeChild(target);
+            self.node.removeChild(ringer);
+        }
+    },
+
+    /** 
+     * Test that firstNodeByClass for a missing node throws the right
+     * exception
+     */
+    function test_firstNodeByClassMissing(self) {
+        try {
+            var ringer = document.createElement('div');
+            ringer.setAttribute('class', 'foobar');
+            self.node.appendChild(ringer);
+            var error = self.assertThrows(
+                Divmod.Runtime.NodeAttributeError,
+                function() {
+                    Divmod.Runtime.theRuntime.firstNodeByClass(
+                        self.node, 'bar');
+                });
+            self.assertEqual(error.root, self.node);
+            self.assertEqual(error.attribute, 'class');
+            self.assertEqual(error.value, 'bar');
+        } finally {
+            self.node.removeChild(ringer);
+        }
+    },
+
+    /** 
+     * Test that nodesByClass works and can find nodes with multiple classes
+     */
+    function test_nodesByClass(self) {
+        try {
+            var target1 = document.createElement('div');
+            target1.setAttribute('class', 'foo bar');
+            var target2 = document.createElement('div');
+            target2.setAttribute('class', 'bar');
+            var ringer = document.createElement('div');
+            ringer.setAttribute('class', 'foobar');
+            self.node.appendChild(target1);
+            self.node.appendChild(target2);
+            self.node.appendChild(ringer);
+            var found = Divmod.Runtime.theRuntime.nodesByClass(self.node, 'bar');
+            self.assertEqual(found.length, 2);
+            self.assertEqual(found[0].getAttribute('class'), 'foo bar');
+            self.assertEqual(found[1].getAttribute('class'), 'bar');
+        } finally {
+            self.node.removeChild(target1);
+            self.node.removeChild(target2);
+            self.node.removeChild(ringer);
+        }
+    },
+
     function test_nodeByAttribute(self) {
         var node = Divmod.Runtime.theRuntime.nodeByAttribute(
             self.node, 'athena:class', 'Divmod.Runtime.Tests.FindInRootNode');
Index: nevow/js/Nevow/Athena/__init__.js
===================================================================
--- nevow/js/Nevow/Athena/__init__.js	(revision 11200)
+++ nevow/js/Nevow/Athena/__init__.js	(working copy)
@@ -770,6 +770,14 @@
         self.widgetParent = widgetParent;
     },
 
+    function firstNodeByClass(self, className) {
+        return Divmod.Runtime.theRuntime.firstNodeByClass(self.node, className);
+    },
+
+    function nodesByClass(self, className) {
+        return Divmod.Runtime.theRuntime.nodesByClass(self.node, className);
+    },
+
     function nodeByAttribute(self, attrName, attrValue, /* optional */ defaultNode) {
         return Divmod.Runtime.theRuntime.nodeByAttribute(self.node, attrName, attrValue, defaultNode);
     },
